// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create an apikey
	// (POST /apikey)
	CreateApikey(ctx echo.Context) error
	// Delete an apikey
	// (DELETE /apikey/{id})
	DeleteApikey(ctx echo.Context, id Id) error
	// Dump all data in the database
	// (GET /dump)
	Dump(ctx echo.Context) error
	// Login an user
	// (POST /login)
	UserLogin(ctx echo.Context) error
	// Login an user
	// (POST /login/urlencoded)
	UserLoginUrlencoded(ctx echo.Context) error

	// (POST /pets)
	CreatePet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id Id) error

	// (GET /pets/{id})
	ReadPet(ctx echo.Context, id Id) error

	// (PUT /pets/{id}/transfer)
	TransferPet(ctx echo.Context, id PathId) error

	// (GET /petstores)
	FindPetstores(ctx echo.Context, params FindPetstoresParams) error

	// (POST /petstores)
	CreatePetstore(ctx echo.Context) error

	// (DELETE /petstores/{id})
	DeletePetstore(ctx echo.Context, id Id) error

	// (GET /petstores/{id})
	ReadPetstore(ctx echo.Context, id Id) error

	// (GET /petstores/{id}/pets)
	ListPets(ctx echo.Context, id Id) error
	// Redirection
	// (GET /redirect)
	Redirect(ctx echo.Context) error
	// Create an user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Delete an user
	// (DELETE /users/{username})
	DeleteUser(ctx echo.Context, username PathUsername) error
	// Give the version of the api
	// (GET /version)
	Version(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateApikey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApikey(ctx echo.Context) error {
	var err error

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateApikey(ctx)
	return err
}

// DeleteApikey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApikey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApikey(ctx, id)
	return err
}

// Dump converts echo context to params.
func (w *ServerInterfaceWrapper) Dump(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Dump(ctx)
	return err
}

// UserLogin converts echo context to params.
func (w *ServerInterfaceWrapper) UserLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserLogin(ctx)
	return err
}

// UserLoginUrlencoded converts echo context to params.
func (w *ServerInterfaceWrapper) UserLoginUrlencoded(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserLoginUrlencoded(ctx)
	return err
}

// CreatePet converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePet(ctx echo.Context) error {
	var err error

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// ReadPet converts echo context to params.
func (w *ServerInterfaceWrapper) ReadPet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadPet(ctx, id)
	return err
}

// TransferPet converts echo context to params.
func (w *ServerInterfaceWrapper) TransferPet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id PathId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransferPet(ctx, id)
	return err
}

// FindPetstores converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetstores(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetstoresParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetstores(ctx, params)
	return err
}

// CreatePetstore converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePetstore(ctx echo.Context) error {
	var err error

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePetstore(ctx)
	return err
}

// DeletePetstore converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePetstore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePetstore(ctx, id)
	return err
}

// ReadPetstore converts echo context to params.
func (w *ServerInterfaceWrapper) ReadPetstore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadPetstore(ctx, id)
	return err
}

// ListPets converts echo context to params.
func (w *ServerInterfaceWrapper) ListPets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPets(ctx, id)
	return err
}

// Redirect converts echo context to params.
func (w *ServerInterfaceWrapper) Redirect(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Redirect(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username PathUsername

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, username)
	return err
}

// Version converts echo context to params.
func (w *ServerInterfaceWrapper) Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Version(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/apikey", wrapper.CreateApikey)
	router.DELETE(baseURL+"/apikey/:id", wrapper.DeleteApikey)
	router.GET(baseURL+"/dump", wrapper.Dump)
	router.POST(baseURL+"/login", wrapper.UserLogin)
	router.POST(baseURL+"/login/urlencoded", wrapper.UserLoginUrlencoded)
	router.POST(baseURL+"/pets", wrapper.CreatePet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.ReadPet)
	router.PUT(baseURL+"/pets/:id/transfer", wrapper.TransferPet)
	router.GET(baseURL+"/petstores", wrapper.FindPetstores)
	router.POST(baseURL+"/petstores", wrapper.CreatePetstore)
	router.DELETE(baseURL+"/petstores/:id", wrapper.DeletePetstore)
	router.GET(baseURL+"/petstores/:id", wrapper.ReadPetstore)
	router.GET(baseURL+"/petstores/:id/pets", wrapper.ListPets)
	router.GET(baseURL+"/redirect", wrapper.Redirect)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/users/:username", wrapper.DeleteUser)
	router.GET(baseURL+"/version", wrapper.Version)

}
