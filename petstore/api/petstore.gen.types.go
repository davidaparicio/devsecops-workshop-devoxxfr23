// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package main

import (
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	ApiKeyScopes = "ApiKey.Scopes"
	CookieScopes = "Cookie.Scopes"
)

// Apikey defines model for Apikey.
type Apikey struct {
	Id Id `json:"id"`
}

// Apikeys defines model for Apikeys.
type Apikeys struct {
	Items []Apikey `json:"items"`
}

// DumpData defines model for DumpData.
type DumpData struct {
	Apikeys   *Apikeys   `json:"apikeys,omitempty"`
	Pets      *Pets      `json:"pets,omitempty"`
	Petstores *Petstores `json:"petstores,omitempty"`
	Sessions  *Sessions  `json:"sessions,omitempty"`
	Users     *Users     `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// FwError defines model for FwError.
type FwError struct {
	Detail string             `json:"detail"`
	Status int32              `json:"status"`
	Title  string             `json:"title"`
	Uuid   openapi_types.UUID `json:"uuid"`
}

// Id defines model for Id.
type Id = string

// LoginData defines model for LoginData.
type LoginData struct {
	Password string   `json:"password"`
	User     Username `json:"user"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	Age        *int    `json:"age,omitempty"`
	Name       PetName `json:"name"`
	PetstoreId *Id     `json:"petstoreId,omitempty"`
}

// NewPetstore defines model for NewPetstore.
type NewPetstore struct {
	Name PetstoreName `json:"name"`
}

// Pet defines model for Pet.
type Pet struct {
	Age        *int     `json:"age,omitempty"`
	Id         Id       `json:"id"`
	Name       PetName  `json:"name"`
	Owner      Username `json:"owner"`
	PetstoreId *Id      `json:"petstoreId,omitempty"`
}

// PetName defines model for PetName.
type PetName = string

// Pets defines model for Pets.
type Pets struct {
	Items []Pet `json:"items"`
}

// Petstore defines model for Petstore.
type Petstore struct {
	Id   Id           `json:"id"`
	Name PetstoreName `json:"name"`
}

// PetstoreName defines model for PetstoreName.
type PetstoreName = string

// Petstores defines model for Petstores.
type Petstores struct {
	Items []Petstore `json:"items"`
}

// Session defines model for Session.
type Session struct {
	Id Id `json:"id"`
}

// Sessions defines model for Sessions.
type Sessions struct {
	Items []Session `json:"items"`
}

// User defines model for User.
type User struct {
	IsAdmin  bool     `json:"isAdmin"`
	Password string   `json:"password"`
	User     Username `json:"user"`
}

// Username defines model for Username.
type Username = string

// Users defines model for Users.
type Users struct {
	Items []User `json:"items"`
}

// Version defines model for Version.
type Version struct {
	CommitId string `json:"commitId"`
	Version  string `json:"version"`
}

// PathId defines model for PathId.
type PathId = Id

// PathUsername defines model for PathUsername.
type PathUsername = Username

// N400 defines model for 400.
type N400 struct {
	Message string `json:"message"`
}

// N401 defines model for 401.
type N401 = Error

// Default defines model for default.
type Default = Error

// TransferPetJSONBody defines parameters for TransferPet.
type TransferPetJSONBody struct {
	PetstoreId Id `json:"petstoreId"`
}

// FindPetstoresParams defines parameters for FindPetstores.
type FindPetstoresParams struct {
	// Name name to filter by
	Name *PetstoreName `form:"name,omitempty" json:"name,omitempty"`

	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// UserLoginJSONRequestBody defines body for UserLogin for application/json ContentType.
type UserLoginJSONRequestBody = LoginData

// UserLoginUrlencodedFormdataRequestBody defines body for UserLoginUrlencoded for application/x-www-form-urlencoded ContentType.
type UserLoginUrlencodedFormdataRequestBody = LoginData

// CreatePetJSONRequestBody defines body for CreatePet for application/json ContentType.
type CreatePetJSONRequestBody = NewPet

// TransferPetJSONRequestBody defines body for TransferPet for application/json ContentType.
type TransferPetJSONRequestBody TransferPetJSONBody

// CreatePetstoreJSONRequestBody defines body for CreatePetstore for application/json ContentType.
type CreatePetstoreJSONRequestBody = NewPetstore

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User
