// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
